{"version":3,"sources":["interfaces/Suit.ts","card/cardConfig.ts","card/renderHearts.ts","card/renderClubs.ts","card/renderDiamonds.ts","card/renderSpades.ts","card/renderBack.ts","card/renderSpace.ts","card/renderText.ts","card/clearCard.ts","card/initCard.tsx","card/ReactCard.tsx","SelectedContext.tsx","Deck.tsx","Column.tsx","SuitSource.tsx","Solitaire.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Suit","renderHeart","ctx","topCurveHeight","cfg","beginPath","moveTo","bezierCurveTo","closePath","fillStyle","fill","renderHearts","topX","topY","translate","botX","botY","scale","renderClub","clubCenterX","clubCenterY","clubOffset","clubRadius","arc","Math","PI","lineTo","renderClubs","renderDiamond","renderDiamonds","renderSpade","topHeight","bottomHeight","bottomWidth","quadraticCurveTo","renderSpades","renderBack","lineWidth","offset","strokeStyle","i","stroke","renderSpace","fillRect","fillText","value","renderText","card","font","suit","S","C","D","H","textAlign","topCornerX","topCornerY","botCornerX","botCornerY","clearCard","isSelected","clearRect","initCard","id","className","isShown","ref","width","height","ReactCard","props","componentDidMount","renderCard","componentDidUpdate","render","onClick","moveState","undefined","refs","canvas","getContext","Component","SelectedContext","React","createContext","ReactDeck","deck","dealt","onDeal","onCardClick","dealer","length","type","topDealt","Consumer","key","selected","createHandler","cards","ind","findIndex","c","ReactColumn","column","handler","reactCards","map","checkSelection","ReactSuitSource","source","moveInd","currMoveInd","placeHolder","sc","index","animationTime","animationDelay","shuffle","curr","shuffled","floor","random","temp","history","Solitaire","isFinished","state","sources","every","src","finishGame","moves","ticks","ticker","time","Date","toISOString","substr","stats","Cookie","getJSON","statistics","pastMoves","pastTicks","Fragment","set","window","clearInterval","handleAnimation","setState","mover","setTimeout","pushHistory","cols","game","s","col","push","undo","newState","pop","draw","cardsPerDeal","cardsToGet","changeDraw","onDeckClick","onSuitClick","canAppend","finalizeSelection","onColumnClick","cardIndex","forEach","target","check","columns","srcs","currStats","Provider","disabled","confirm","location","reload","_","Object","values","createCards","createColumns","keys","setInterval","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9042f6b.chunk.js","sourcesContent":["enum Suit {\n    S = \"Spades\",\n    H = \"Hearts\",\n    C = \"Clubs\",\n    D = \"Diamonds\",\n};\n\nexport default Suit;","export default {\n    canvasWidth: 150,\n    canvasHeight: 200,\n    fontStyle: '50px Calibri',\n    cornerFontStyle: '30px Calibri',\n    offset: 10,\n    iconWidth: 30,\n    iconHeight: 35,\n    spadeColor: 'black',\n    clubColor: 'black',\n    heartColor: 'red',\n    diamondColor: 'red',\n    backColor: 'red',\n    backgroundColor: 'white',\n    selectedColor: 'skyblue',\n    numBackLines: 40,\n    spaceColor: 'darkgray',\n};","import cfg from './cardConfig';\n\nconst renderHeart = (ctx: CanvasRenderingContext2D): void => {\n    const topCurveHeight = cfg.iconHeight * 0.3;\n    ctx.beginPath();\n        ctx.moveTo(0, topCurveHeight);\n        ctx.bezierCurveTo(\n            0,\n            0,\n            -cfg.iconWidth / 2,\n            0,\n            -cfg.iconWidth / 2,\n            topCurveHeight,\n        );\n        ctx.bezierCurveTo(\n            -cfg.iconWidth / 2,\n            (cfg.iconHeight + topCurveHeight) / 2,\n            0,\n            (cfg.iconHeight + topCurveHeight) / 2,\n            0,\n            cfg.iconHeight,\n        );\n        ctx.bezierCurveTo(\n            0,\n            (cfg.iconHeight + topCurveHeight) / 2,\n            cfg.iconWidth / 2,\n            (cfg.iconHeight + topCurveHeight) / 2,\n            cfg.iconWidth / 2,\n            topCurveHeight,\n        );\n        ctx.bezierCurveTo(\n            cfg.iconWidth / 2,\n            0,\n            0,\n            0,\n            0,\n            topCurveHeight\n        );\n    ctx.closePath();\n    ctx.fillStyle = cfg.heartColor;\n    ctx.fill();\n};\n\nconst renderHearts = (ctx: CanvasRenderingContext2D): void => {\n\n    const topX = cfg.iconWidth / 2 + cfg.offset;\n    const topY = cfg.offset;\n    ctx.translate(topX, topY);\n    renderHeart(ctx);\n    ctx.translate(-topX, -topY);\n\n    const botX = cfg.canvasWidth - (cfg.iconWidth / 2 + cfg.offset);\n    const botY = cfg.canvasHeight - cfg.iconHeight / 2;\n    ctx.translate(botX, botY);\n    ctx.scale(1, -1);\n    renderHeart(ctx);\n    ctx.scale(1, -1);\n    ctx.translate(-botX, -botY);\n};\n\nexport default renderHearts;","import cfg from './cardConfig';\n\nconst renderClub = (ctx: CanvasRenderingContext2D): void => {\n    // Top left\n    const clubCenterX = cfg.iconWidth / 2;\n    const clubCenterY = cfg.iconHeight / 2;\n    const clubOffset = clubCenterX / 10;\n    const clubRadius = clubCenterX / 2;\n    // draw the club\n    ctx.beginPath();\n        ctx.fillStyle = cfg.clubColor;\n        ctx.moveTo(clubCenterX, clubCenterY);\n        ctx.arc(clubCenterX - clubRadius + clubOffset, clubCenterY, clubRadius, 0, 2 * Math.PI);\n        ctx.moveTo(clubCenterX, clubCenterY);\n        ctx.arc(clubCenterX + clubRadius - clubOffset, clubCenterY, clubRadius, 0, 2 * Math.PI);\n        ctx.moveTo(clubCenterX, clubCenterY);\n        ctx.arc(clubCenterX, clubCenterY - clubRadius + clubOffset, clubRadius, 0, 2 * Math.PI);\n        ctx.moveTo(clubCenterX, clubCenterY);\n        ctx.lineTo(clubCenterX - clubCenterX / 2, clubCenterY * 2);\n        ctx.lineTo(clubCenterX + clubCenterX / 2, clubCenterY * 2);\n        ctx.fill();\n    ctx.closePath();\n};\n\nconst renderClubs = (ctx: CanvasRenderingContext2D): void => {\n    ctx.translate(cfg.offset, cfg.offset);\n    renderClub(ctx);\n    ctx.translate(-cfg.offset, -cfg.offset);\n\n    const botX = cfg.canvasWidth - cfg.iconWidth - cfg.offset;\n    const botY = cfg.canvasHeight - cfg.iconHeight / 2;\n    ctx.translate(botX, botY);\n    ctx.scale(1, -1);\n    renderClub(ctx);\n    ctx.scale(1, -1);\n    ctx.translate(-botX, -botY);\n};\n\nexport default renderClubs;","import cfg from './cardConfig';\n\nconst renderDiamond = (ctx: CanvasRenderingContext2D): void => {\n    ctx.beginPath();\n        ctx.fillStyle = cfg.diamondColor;\n        ctx.moveTo(cfg.iconWidth / 2, 0);\n        ctx.lineTo(0, cfg.iconHeight / 2);\n        ctx.lineTo(cfg.iconWidth / 2, cfg.iconHeight);\n        ctx.lineTo(cfg.iconWidth, cfg.iconHeight / 2);\n        ctx.lineTo(cfg.iconWidth / 2, 0);\n        ctx.fill();\n    ctx.closePath();\n};\n\nconst renderDiamonds = (ctx: CanvasRenderingContext2D): void => {\n    ctx.translate(cfg.offset, cfg.offset);\n    renderDiamond(ctx);\n    ctx.translate(-cfg.offset, -cfg.offset);\n\n    const botX = cfg.canvasWidth - cfg.iconWidth - cfg.offset;\n    const botY = cfg.canvasHeight - cfg.iconHeight / 2;\n    ctx.translate(botX, botY);\n    ctx.scale(1, -1);\n    renderDiamond(ctx);\n    ctx.scale(1, -1);\n    ctx.translate(-botX, -botY);\n};\n\nexport default renderDiamonds;","import cfg from './cardConfig';\n\nconst renderSpade = (ctx: CanvasRenderingContext2D): void => {\n    const topHeight = cfg.iconHeight * 0.7;\n    const bottomHeight = cfg.iconWidth * 0.3;\n    const bottomWidth = cfg.iconWidth * 0.7;\n    const topHeightModifier = 1.3;\n    ctx.beginPath();\n        ctx.moveTo(0, 0);\n        // Top left of spade\n        ctx.bezierCurveTo(\n            0,\n            topHeight / 2,\n            -cfg.iconWidth / 2,\n            topHeight / 2,\n            -cfg.iconWidth / 2,\n            topHeight,\n        );\n        // bottom left of spade\n        ctx.bezierCurveTo(\n            -cfg.iconWidth / 2,\n            topHeight * topHeightModifier,\n            0,\n            topHeight * topHeightModifier,\n            0,\n            topHeight,\n        );\n        // bottom right of spade\n        ctx.bezierCurveTo(\n            0,\n            topHeight * topHeightModifier,\n            cfg.iconWidth / 2,\n            topHeight * topHeightModifier,\n            cfg.iconWidth / 2,\n            topHeight,\n        );\n        // top right of spade\n        ctx.bezierCurveTo(\n            cfg.iconWidth / 2,\n            topHeight / 2,\n            0,\n            topHeight / 2,\n            0,\n            0,\n        );\n    ctx.closePath();\n    ctx.fill();\n\n    // Bottom\n    ctx.beginPath();\n        ctx.moveTo(0, topHeight);\n        ctx.quadraticCurveTo(\n            0,\n            topHeight + bottomHeight,\n            -bottomWidth / 2,\n            topHeight + bottomHeight,\n        );\n        ctx.lineTo(bottomWidth / 2, topHeight + bottomHeight);\n        ctx.quadraticCurveTo(\n            0,\n            topHeight + bottomHeight,\n            0,\n            topHeight,\n        );\n    ctx.closePath();\n    ctx.fillStyle = cfg.spadeColor;\n    ctx.fill();\n};\n\nconst renderSpades = (ctx: CanvasRenderingContext2D): void => {\n    ctx.fillStyle = cfg.spadeColor;\n    const topX = cfg.iconWidth / 2 + cfg.offset;\n    const topY = cfg.offset;\n    ctx.translate(topX, topY);\n    renderSpade(ctx);\n    ctx.translate(-topX, -topY);\n\n    const botX = cfg.canvasWidth - (cfg.iconWidth / 2 + cfg.offset);\n    const botY = cfg.canvasHeight - cfg.iconHeight / 2;\n    // Bottom spade\n    ctx.translate(botX, botY);\n    ctx.scale(1, -1);\n    renderSpade(ctx);\n    ctx.scale(1, -1);\n    ctx.translate(-botX, -botY);\n};\n\nexport default renderSpades;","import cfg from './cardConfig';\n\nconst renderBack = (ctx: CanvasRenderingContext2D): void => {\n    ctx.lineWidth = 1.0;\n    const offset = 2 * (cfg.canvasHeight / cfg.numBackLines);\n    \n    ctx.beginPath();\n    ctx.strokeStyle = 'red';\n    for (let i = 0; i < cfg.numBackLines; ++i) {\n        ctx.moveTo(0, i * offset);\n        ctx.lineTo(i * offset, 0);\n    }\n    ctx.closePath();\n    ctx.stroke();\n    ctx.beginPath();\n    for (let i = 0; i < cfg.numBackLines; ++i) {\n        ctx.moveTo(cfg.canvasWidth - (i * offset), 0);\n        ctx.lineTo(cfg.canvasWidth, i * offset);\n    }\n    ctx.closePath();\n    ctx.stroke();\n};\n\nexport default renderBack;","import cfg from './cardConfig';\n\nconst renderSpace = (ctx: CanvasRenderingContext2D): void => {\n    ctx.fillStyle = cfg.spaceColor;\n    ctx.fillRect(0, 0, cfg.canvasWidth, cfg.canvasHeight);\n};\n\nexport default renderSpace;","import cfg from './cardConfig';\nimport { Card, Suit } from '../interfaces';\n\nconst fillText = (ctx: CanvasRenderingContext2D, value: number): void => {\n    if (value === 1) {\n        ctx.fillText('A', 0, 0);\n    } else if (value < 11) {\n        ctx.fillText(`${value}`, 0, 0);\n    } else if (value === 11) {\n        ctx.fillText('J', 0, 0);\n    } else if (value === 12) {\n        ctx.fillText('Q', 0, 0);\n    } else {\n        ctx.fillText('K', 0, 0);\n    }\n};\n\nconst renderText = (ctx: CanvasRenderingContext2D, card: Card): void => {\n    // Text in the middle\n    ctx.font = cfg.fontStyle;\n    switch (card.suit) {\n        case Suit.S:\n            ctx.fillStyle = cfg.spadeColor;\n            break;\n        case Suit.C:\n            ctx.fillStyle = cfg.clubColor;\n            break;\n        case Suit.D:\n            ctx.fillStyle = cfg.diamondColor;\n            break;\n        case Suit.H:\n            ctx.fillStyle = cfg.heartColor;\n            break;\n    }\n    ctx.textAlign = 'center';\n    ctx.translate(cfg.canvasWidth / 2, cfg.canvasHeight / 2);\n    fillText(ctx, card.value);\n    ctx.translate(-cfg.canvasWidth / 2, -cfg.canvasHeight / 2);\n\n    const topCornerX = cfg.canvasWidth - 2 * cfg.offset;\n    const topCornerY = 3 * cfg.offset;\n    ctx.translate(topCornerX, topCornerY);\n    ctx.font = cfg.cornerFontStyle;\n    fillText(ctx, card.value);\n    ctx.translate(-topCornerX, -topCornerY);\n\n    const botCornerX = 2 * cfg.offset;\n    const botCornerY = cfg.canvasHeight - 1.5 * cfg.offset;\n    ctx.translate(botCornerX, botCornerY);\n    ctx.font = cfg.cornerFontStyle;\n    fillText(ctx, card.value);\n    ctx.translate(-botCornerX, -botCornerY);\n};\n\nexport default renderText;","import cfg from './cardConfig';\n\nconst clearCard = (ctx: CanvasRenderingContext2D, isSelected?: boolean): void => {\n    ctx.clearRect(0, 0, cfg.canvasWidth, cfg.canvasHeight);\n    if (isSelected) {\n        ctx.fillStyle = cfg.selectedColor;\n    } else {\n        ctx.fillStyle = cfg.backgroundColor;\n    }\n    ctx.fillRect(0, 0, cfg.canvasWidth, cfg.canvasHeight);\n};\n\nexport default clearCard;","import React from 'react';\nimport cfg from './cardConfig';\nimport { Card } from '../interfaces';\n\nconst initCard = (card: Card): React.ReactComponentElement<\"canvas\"> => {\n    return <canvas id={`canvas${card.suit}-${card.value}`} className={`react-card ${card.isShown ? '' : 'no-click'}`} ref=\"canvas\" width={cfg.canvasWidth} height={cfg.canvasHeight} />\n};\n\nexport default initCard;","import React, { Component } from 'react';\nimport { Card, Suit } from '../interfaces';\nimport renderHearts from './renderHearts';\nimport renderClubs from './renderClubs';\nimport renderDiamonds from './renderDiamonds';\nimport renderSpades from './renderSpades';\nimport renderBack from './renderBack';\nimport renderSpace from './renderSpace';\nimport renderText from './renderText';\nimport clearCard from './clearCard';\nimport initCard from './initCard';\n\nimport './ReactCard.css';\ninterface CardProps {\n    card: Card;\n    onClick: (card: Card) => void;\n    isSelected?: boolean;\n    moveState?: number;\n};\n\nexport default class ReactCard extends Component<CardProps, {}, {}> {\n    public constructor(props: CardProps) {\n        super(props);\n    };\n\n    public componentDidMount = () => {\n        this.renderCard();\n    };\n\n    public componentDidUpdate = () => {\n        this.renderCard();  \n    };\n\n    public render = (): React.ReactNode => {\n        const { card, onClick, moveState } = this.props;\n        return (\n            <div className={`react-card-holder ${moveState === undefined ? '' : (moveState === 0 ? 'card-move' : 'card-moved')}`} onClick={() => onClick(card)}>\n                {initCard(card)}\n            </div>\n        );\n    };\n\n    private renderCard = (): void => {\n        const { card, isSelected } = this.props;\n        const ctx = (this.refs.canvas as HTMLCanvasElement).getContext('2d');\n        if (ctx !== null) {\n            clearCard(ctx, isSelected);\n            if (!card.isShown) {\n                renderBack(ctx);\n                return;\n            } else if (card.value === -1) {\n                renderSpace(ctx);\n                return;\n            }\n            switch (card.suit) {\n                case Suit.C:\n                    renderClubs(ctx);\n                    break;\n                case Suit.D:\n                    renderDiamonds(ctx);\n                    break;\n                case Suit.H:\n                    renderHearts(ctx);\n                    break;\n                case Suit.S:\n                    renderSpades(ctx);\n                    break;\n            }\n            renderText(ctx, card);\n        }\n    }\n};","import React from 'react';\nimport { Card } from './interfaces';\n\nconst SelectedContext = React.createContext(([] as Card[]));\n\nexport default SelectedContext;","import React from 'react';\nimport { Deck, Suit } from './interfaces';\nimport ReactCard from './card/ReactCard';\nimport SelectedContext from './SelectedContext';\nimport './Deck.css';\n\ninterface DeckProps extends Deck {\n    onDeal: () => void;\n    onCardClick: () => void;\n};\n\nconst ReactDeck: React.FunctionComponent<DeckProps> = ({ deck, dealt, onDeal, onCardClick }) => {\n    let dealer: React.ReactNode = null;\n    if (deck.length > 0) {\n        dealer = <ReactCard card={{suit: Suit.S, type:'card', isShown: false, value: 0 }} onClick={onDeal} />\n    } else {\n        dealer = <ReactCard card={{suit: Suit.S, type:'card', isShown: true, value: -1 }} onClick={onDeal} />;\n    }\n    let topDealt: React.ReactNode[] = [];\n    if (dealt.length > 0) {\n        topDealt = [ <SelectedContext.Consumer key=\"deck-select\">\n            { selected => {\n                const card = dealt[dealt.length - 1];\n                const isSelected = (\n                    selected.length === 1\n                    && card.suit === selected[0].suit\n                    && card.value === selected[0].value\n                );\n                return <ReactCard key={`${card.suit} ${card.value}`} card={card} onClick={onCardClick} isSelected={isSelected} />;\n            }}\n        </SelectedContext.Consumer> ];\n        \n    } else {\n        topDealt = [ <div className=\"placeholder-card\"><ReactCard key={`${Suit.S} -1`} card={{suit: Suit.S, type:'card', isShown: true, value: -1 }} onClick={() => {}} /></div> ];\n    }\n    return (\n        <div className=\"react-deck\">\n            <div className=\"deck-dealer\">\n                {dealer}\n            </div>\n            <div className=\"deck-dealt\">\n                {topDealt}\n            </div>\n        </div>\n    );\n};\n\nexport default ReactDeck;","import React from 'react';\nimport { Column, Card, Suit } from './interfaces';\nimport ReactCard from './card/ReactCard';\nimport SelectedContext from './SelectedContext';\n\nimport './Column.css';\n\ninterface ColProps {\n    column: Column;\n    onClick: (index?: number) => void;\n};\n\n\n\nconst ReactColumn: React.FunctionComponent<ColProps> = ({ column, onClick }) => {\n    const { cards } = column;\n    const handler = createHandler(cards, onClick);\n    const checkSelection = (selected: Card[], card: Card): React.ReactNode => {\n        const isSelected = selected.findIndex(c => c.suit === card.suit && c.value === card.value) !== -1;\n        return <ReactCard key={`${card.suit} ${card.value}`} card={card} onClick={handler} isSelected={isSelected} />;\n    }\n    const reactCards = cards.length === 0\n        ? [ <ReactCard key=\"bedrock\" card={{type: 'card', value: -1, suit: Suit.S, isShown: true}} onClick={handler} /> ]\n        : cards.map(c => <SelectedContext.Consumer key={`${c.suit} ${c.value}`}>\n            {selected => checkSelection(selected, c)}\n        </SelectedContext.Consumer>);\n    return <div className=\"react-column\">\n        {reactCards}\n    </div>;\n};\n\nconst createHandler = (cards: Card[], onClick: (index?: number) => void): (card: Card) => void => {\n    return (card: Card): void => {\n        const ind = cards.findIndex(c => c.value === card.value && c.suit === card.suit);\n        if (ind === -1) {\n            onClick(undefined);\n        } else {\n            onClick(ind);\n        }\n    };\n}\n\nexport default ReactColumn;","import React from 'react';\nimport { SuitSource, Suit } from './interfaces';\nimport ReactCard from './card/ReactCard';\nimport SelectedContext from './SelectedContext';\n\nimport './SuitSource.css';\n\ninterface SuitSourceProps {\n    source: SuitSource;\n    onClick: (source: SuitSource) => void;\n    currMoveInd: number;\n    moveInd: number;\n};\n\nconst ReactSuitSource: React.FunctionComponent<SuitSourceProps> = ({ source, onClick, moveInd, currMoveInd }) => {\n\n    const placeHolder = <ReactCard card={{type: 'card', value: -1, suit: Suit.S, isShown: true}} onClick={() => onClick(source)} />;\n    const card = source.cards.map((sc, i) => {\n        return (\n            <SelectedContext.Consumer key={`${sc.value} ${sc.suit}`}>\n                {selected => {\n                    let moveState: number|undefined = undefined;\n                    if (moveInd < i) {\n                        // we've passed; 1\n                        moveState = 1;\n                    } else if (moveInd === i && currMoveInd >= source.index) {\n                        // animate!\n                        moveState = 0;\n                    }\n                    const isSelected = selected.findIndex(c => c.value === sc.value && c.suit === sc.suit) !== -1;\n                    return <ReactCard key={`${sc.value} ${sc.suit}`} moveState={moveState} card={sc} onClick={() => onClick(source)} isSelected={isSelected} />\n                }}\n            </SelectedContext.Consumer>\n        );\n    });\n    return <div className=\"suit-source-container\">\n        <div className=\"placeholder-suit-card\">\n            {placeHolder}\n        </div>\n        {card}\n    </div>;\n};\n\nexport default ReactSuitSource;","import React, { Component } from 'react';\nimport Cookie from 'js-cookie';\nimport { Card, SelectedCard, Column, Deck, SuitSource, Suit } from './interfaces';\nimport ReactDeck from './Deck';\nimport ReactColumn from './Column';\nimport ReactSuitSource from './SuitSource';\nimport SelectedContext from './SelectedContext';\nimport './Solitaire.css';\n\nconst animationTime = 3000;\nconst animationDelay = 100;\n\nfunction shuffle(cards: Card[]): Card[] {\n    let curr = cards.length;\n    const shuffled: Card[] = [...cards];\n\n    while (curr) {\n        const ind = Math.floor(Math.random() * curr--);\n        const temp = shuffled[curr];\n        shuffled[curr] = shuffled[ind];\n        shuffled[ind] = temp;\n    }\n    return shuffled;\n};\n\nfunction createCards(): Card[] {\n    const cards: Card[] = [];\n    Object.values(Suit).forEach(s => {\n        for (let i = 1; i <= 13; ++i) {\n            const card: Card = {\n                type: 'card',\n                value: i,\n                suit: s,\n                isShown: false,\n            };\n            cards.push(card);\n        }\n    });\n    return cards;\n};\n\nfunction createColumns(cards: Card[]): Column[] {\n    const cols: Column[] = [];\n    for (let i = 0; i < 7; ++i) {\n        cols.push({\n            type: 'column',\n            cards: [],\n            index: i,\n        });\n    }\n    let ind = 0;\n    while (ind++ < 7) {\n        for (let i = ind - 1; i < 7; ++i) {\n            cols[i].cards.push(cards.pop()!);\n        }\n    }\n    for (let i = 0; i < 7; ++i) {\n        cols[i].cards[i].isShown = true;\n    }\n    return cols;\n};\n\ninterface GameState {\n    deck: Deck;\n    cols: Column[];\n    sources: SuitSource[];\n};\n\ninterface Stats {\n    moves: number;\n    ticks: number;\n}\n\ninterface SolitaireState extends GameState {\n    selected: SelectedCard;\n    cardsPerDeal: number;\n    moves: number;\n    ticks: number;\n    stats: React.ReactNode;\n    readonly ticker: number;\n    moveInd: number;\n};\n\nconst history: GameState[] = [];\n\nexport default class Solitaire extends Component<{}, SolitaireState> {\n    public constructor(props: {}) {\n        super(props);\n\n        // Create cards, deal, set up deck, etc.\n        const cards = shuffle(shuffle(createCards()));\n        // Create columns. This should edit our cards array accordingly\n        const cols = createColumns(cards);\n        // Create deck\n        const deck: Deck = {\n            type: 'deck',\n            deck: cards,\n            dealt: [],\n        };\n        const sources: SuitSource[] = Object.keys(Suit).map((_, i) => {\n            return {\n                type: 'suitSource',\n                index: i,\n                cards: [],\n            };\n        });\n\n        this.state = {\n            deck,\n            cols,\n            sources,\n            selected: {\n                type: 'selected',\n                cards: [],\n                source: undefined,\n            },\n            cardsPerDeal: 1,\n            stats: null,\n            moves: 0,\n            ticks: 0,\n            ticker: window.setInterval(() => {\n                const { ticks } = this.state;\n                this.setState({ ticks: ticks + 1 });\n            }, 1000),\n            moveInd: -1,\n        };\n    };\n\n    private isFinished = (): boolean => {\n        const { sources } = this.state;\n        return sources.every(src => {\n            return (\n                src.cards.length > 0 &&\n                src.cards[src.cards.length - 1].value === 13\n            );\n        });\n    };\n\n    private finishGame = (): void => {\n        const { moves, ticks, moveInd, ticker } = this.state;\n        if (!this.isFinished() || moveInd >= 0) {\n            return;\n        }\n\n        const time = new Date(ticks * 1000).toISOString().substr(11, 8);\n\n        let stats: React.ReactNode = null;\n        // update statistics\n        if (Cookie.getJSON('stats') !== undefined) {\n            const statistics: Stats = Cookie.getJSON('stats') as Stats;\n            const pastMoves = statistics.moves < moves ? statistics.moves : moves;\n            const pastTicks = statistics.ticks < ticks ? statistics.ticks : ticks;\n            stats = (\n                <React.Fragment>\n                    <h1>Congratulations! Finished in {time} time with {moves} moves!</h1>\n                    <h1>Best: {pastMoves} moves | {new Date(pastTicks * 1000).toISOString().substr(11, 8)} Time</h1>\n                </React.Fragment>\n            );\n            Cookie.set('stats', { moves: pastMoves, ticks: pastTicks });\n        } else {\n            stats = <h1>Congratulations! Finished in {time} time with {moves} moves!</h1>\n            Cookie.set('stats', { moves: moves, ticks: ticks });\n        }\n        window.clearInterval(ticker);\n        // kick off animation\n        this.handleAnimation();\n        this.setState({ stats });\n    }\n\n    private handleAnimation = (): void => {\n        // Get the current index, and move that source. Then, set up the next one\n        const { moveInd } = this.state;\n        if (!this.isFinished() || moveInd > -1) {\n            return;\n        }\n        const mover = (): void => {\n            const { moveInd } = this.state;\n            if (moveInd > 51) {\n                return;\n            }\n            this.setState({ moveInd: moveInd + 1 });\n            window.setTimeout(mover, moveInd % 4 === 2 ? animationTime - (5 * animationDelay) : animationDelay);\n        }\n        this.setState({ moveInd: 0 }, () => window.setTimeout(mover, animationDelay));\n    };\n\n    private pushHistory = (): void => {\n        const { deck, sources, cols } = this.state;\n        // create deep copies; copy the cards!\n\n        const newDeck: Deck = {\n            dealt: deck.dealt.map(c => {return {...c}}),\n            deck: deck.deck.map(c => {return {...c}}),\n            type: 'deck',\n        };\n        const newSources: SuitSource[] = sources.map(s => {\n            const src: SuitSource = {\n                cards: s.cards.map(c => {return {...c}}),\n                index: s.index,\n                type: 'suitSource',\n            };\n            return src;\n        });\n        const newCols: Column[] = cols.map(col => {\n            const cl: Column = {\n                cards: col.cards.map(c => {return {...c}}),\n                index: col.index,\n                type: 'column',\n            };\n            return cl;\n        })\n\n        const game: GameState = {\n            deck: newDeck,\n            sources: newSources,\n            cols: newCols,\n        };\n        history.push(game);\n        const { moves } = this.state;\n        this.setState({ moves: moves + 1 });\n    };\n\n    private undo = (): void => {\n        const { selected } = this.state;\n        const newState = history.pop();\n        if (newState) {\n            selected.cards = [];\n            selected.source = undefined;\n            this.setState({ ...newState, selected });\n        }\n        const { moves } = this.state;\n        this.setState({ moves: moves + 1 });\n    };\n\n    private draw = (): void => {\n        const { selected, deck, cardsPerDeal, moves } = this.state;\n        if (deck.deck.length === 0) {\n            // reset\n            let card: Card|undefined = deck.dealt.pop();\n            while (card !== undefined) {\n                card.isShown = false;\n                deck.deck.push(card);\n                card = deck.dealt.pop();\n            }\n        } else {\n            // move\n            // if one per draw, just engage\n            if (cardsPerDeal === 1) {\n                const card: Card = deck.deck.pop()!;\n                card.isShown = true;\n                deck.dealt.push(card);\n            } else {\n                // see how many cards we have\n                const cardsToGet = deck.deck.length > 3 ? 3 : deck.deck.length;\n                for (let i = 0; i < cardsToGet; ++i) {\n                    const card: Card = deck.deck.pop()!;\n                    card.isShown = true;\n                    deck.dealt.push(card);\n                }\n            }\n        }\n        selected.cards = [];\n        selected.source = undefined;\n        this.setState({ selected, deck, moves: moves + 1 });\n    };\n\n    private changeDraw = (): void => {\n        const { cardsPerDeal } = this.state;\n        this.setState({\n            cardsPerDeal: cardsPerDeal === 3 ? 1 : 3,\n        });\n    }\n\n    private onDeckClick = (): void => {\n        const { selected, deck } = this.state;\n        if (selected.source) {\n            selected.cards = [];\n            selected.source = undefined;\n        } else if (deck.dealt.length > 0) {\n            selected.cards = [ deck.dealt[deck.dealt.length - 1] ];\n            selected.source = deck;\n        } else {\n            selected.cards = [];\n            selected.source = undefined;\n        }\n        this.setState({ selected });\n    };\n\n    private onSuitClick = (source: SuitSource): void => {\n        let { selected, sources} = this.state;\n        // if we have selected something, see if we can place into. If we can, then engage?\n        if (selected.source !== undefined) {\n            // first see if we're only holding one\n            if (selected.cards.length === 1) {\n                const card = selected.cards[0];\n                if (this.canAppend(source, card)) {\n                    this.pushHistory();\n                    // finalize, then move\n                    this.finalizeSelection();\n                    // refresh our view of who is selected and who the sources are!\n                    selected = this.state.selected;\n                    sources = this.state.sources;\n                    source.cards.push(card);\n                } else {\n                    selected.source = undefined;\n                    selected.cards = [];\n                }\n            }\n        } else {\n            // we are selecting FROM this suitSource\n            if (source.cards.length > 0) {\n                selected.source = source;\n                selected.cards = [ source.cards[source.cards.length - 1] ];\n            }\n        }\n        sources[source.index] = source;\n        this.setState({ selected, sources });\n        if (this.isFinished()) {\n            this.finishGame();\n        }\n    };\n\n    private onColumnClick = (source: Column, cardIndex?: number): void => {\n        let { selected, cols } = this.state;\n        if (selected.source !== undefined) {\n            // We are trying to append onto our column. Do the checks!\n            if (selected.source.type === 'column') {\n                // check that suit is compatible and number is correct, then engage\n                if (this.canAppend(source, selected.cards[0])) {\n                    this.pushHistory();\n                    // We can append! add to our column, then finalize\n                    selected.cards.forEach(c => {\n                        source.cards.push(c);\n                    });\n                    this.finalizeSelection();\n                    // refresh our view of who is selected and who the sources are!\n                    selected = this.state.selected;\n                    cols = this.state.cols;\n                } else {\n                    selected.cards = [];\n                    selected.source = undefined;\n                }\n            } else if (selected.source.type === 'deck') {\n                if (this.canAppend(source, selected.cards[0])) {\n                    this.pushHistory();\n                    source.cards.push(selected.cards[0]);\n                    this.finalizeSelection();\n                    selected = this.state.selected;\n                    cols = this.state.cols;\n                }\n            } else if (selected.source.type === 'suitSource') {\n                if (this.canAppend(source, selected.cards[0])) {\n                    this.pushHistory();\n                    source.cards.push(selected.cards[0]);\n                    this.finalizeSelection();\n                    selected = this.state.selected;\n                    cols = this.state.cols;\n                }\n            }\n        } else if (cardIndex !== undefined) {\n            // Set the flag!\n            // check that the selected card is shown\n            selected.cards = [];\n            selected.source = undefined;\n            if (source.cards[cardIndex].isShown) {\n                selected.cards = [];\n                for (let i = cardIndex; i < source.cards.length; ++i) {\n                    selected.cards.push(source.cards[i]);\n                }\n                selected.source = source;\n            }\n        }\n        this.setState({ selected, cols });\n    };\n\n    private canAppend = (target: Column|Deck|SuitSource, check: Card): boolean => {\n        if (target.type === 'deck') {\n            // can never append to deck\n            return false;\n        } else if (target.type === 'column') {\n            // compatible suit, decrement number\n            if (target.cards.length === 0) {\n                // has to be king!\n                return check.value === 13;\n            }\n            const card = target.cards[target.cards.length - 1];\n            if (\n                ((card.suit === Suit.C || card.suit === Suit.S) && (check.suit === Suit.H || check.suit === Suit.D))\n                ||\n                ((card.suit === Suit.H || card.suit === Suit.D) && (check.suit === Suit.C || check.suit === Suit.S))\n            ) {\n                // suits are compatible - check the number\n                return check.value === card.value - 1;\n            }\n        } else if (target.type === 'suitSource') {\n            // same suit, increment number\n            if (target.cards.length === 0) {\n                return check.value === 1;\n            }\n            const card = target.cards[target.cards.length - 1];\n            return check.suit === card.suit && check.value === card.value + 1;\n        }\n        return false;\n    };\n\n    private finalizeSelection = (): void => {\n        const { selected, sources, deck, cols } = this.state;\n        //const { deck, sources, cols } = this.state;\n        if (selected.source === undefined) {\n            return;\n        }\n        if (selected.source.type === 'deck') {\n            deck.dealt.pop();\n        } else if (selected.source.type === 'column') {\n            // pop for the number of cards we have selected\n            selected.cards.forEach(() => {\n                cols[(selected.source as Column).index].cards.pop();\n            });\n            // if there are any cards left, flip the last one\n            if (cols[(selected.source as Column).index].cards.length > 0) {\n                cols[(selected.source as Column).index].cards[\n                    cols[(selected.source as Column).index].cards.length - 1\n                ].isShown = true;\n            }\n        } else if (selected.source.type === 'suitSource') {\n            sources[selected.source.index].cards.pop();\n        }\n        selected.cards = [];\n        selected.source = undefined;\n        this.setState({ selected, deck, sources, cols });\n    };\n\n    public render = () => {\n        const { deck, cols, sources, selected, cardsPerDeal, moves, ticks, stats, moveInd } = this.state;\n        const time = new Date(ticks * 1000).toISOString().substr(11, 8);\n        const columns = cols.map(c => {\n            return <ReactColumn key={c.index} column={c} onClick={(index?: number) => this.onColumnClick(c, index)} />\n        });\n        const srcs = sources.map((s, i) => {\n            return (\n                <ReactSuitSource\n                    key={s.index}\n                    source={s}\n                    onClick={this.onSuitClick}\n                    moveInd={12 - Math.floor(moveInd / 4)}\n                    currMoveInd={moveInd === -1 ? -1 : moveInd % 4}\n                />\n            );\n        });\n        const currStats = (\n            <React.Fragment>\n            <p>{moves} {moves === 1 ? 'Move' : 'Moves'} Made</p>\n            <p>{time} Time Elapsed</p>\n            </React.Fragment>\n        );\n        return (\n            <SelectedContext.Provider value={selected.cards}>\n                <div className=\"solitaire-board\">\n                    <div className=\"solitaire-header\">\n                        <div className=\"solitaire-stats\">\n                            {stats === null ? currStats : stats}\n                        </div>\n                    </div>\n                    <div className=\"solitaire-dealer\">\n                        <div className=\"solitaire-deck\">\n                            <ReactDeck\n                                type=\"deck\"\n                                deck={deck.deck}\n                                dealt={deck.dealt}\n                                onDeal={this.draw}\n                                onCardClick={this.onDeckClick}\n                            />\n                            <button\n                                type=\"button\"\n                                className=\"change-deal\"\n                                onClick={this.changeDraw}\n                            >\n                                Deal {cardsPerDeal === 3 ? '1' : '3'} per draw\n                            </button>\n                        </div>\n                        <div className=\"solitaire-source-mat\">\n                            <div className=\"solitaire-sources\">\n                                {srcs}\n                            </div>\n                            <div className=\"solitaire-buttons\">\n                                <button\n                                    type=\"button\"\n                                    className=\"solitaire-undo\"\n                                    onClick={this.undo}\n                                    disabled={history.length === 0}\n                                >\n                                    Undo\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"solitaire-reset\"\n                                    onClick={() => {\n                                        // check all are done OR ask\n                                        if (\n                                            this.isFinished() ||\n                                            window.confirm('Are you sure you would like to start a new game?')) {\n                                            window.location.reload();\n                                        }\n                                    }}\n                                >\n                                    New Game\n                                </button>\n                                {\n                                    // Uncomment to show debug finisher\n\n                                    <button\n                                        type=\"button\"\n                                        onClick={() => {\n                                            [Suit.C, Suit.D, Suit.H, Suit.S].forEach((suit, s) => {\n                                                for (let i = 1; i <= 13; ++i) {\n                                                    sources[s].cards.push({\n                                                        isShown: true,\n                                                        suit: suit,\n                                                        value: i,\n                                                        type: 'card',\n                                                    });\n                                                }\n                                            });\n                                            cols.forEach((_, i) => {\n                                                cols[i].cards = [];\n                                            });\n                                            deck.dealt = [];\n                                            deck.deck = [];\n                                            this.setState({ sources, cols, deck });\n                                            this.finishGame();\n                                        }}\n                                    >\n                                        Finish Game\n                                    </button>\n\n                                }\n                                \n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"solitaire-cols\">\n                        {columns}\n                    </div>\n                </div>\n            </SelectedContext.Provider>\n        );\n    };\n};","import React from 'react';\nimport './App.css';\nimport Solitaire from './Solitaire';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Solitaire />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}