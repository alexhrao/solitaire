{"version":3,"sources":["interfaces/Suit.ts","card/cardConfig.ts","card/renderHearts.ts","card/renderClubs.ts","card/renderDiamonds.ts","card/renderSpades.ts","card/renderBack.ts","card/renderSpace.ts","card/renderText.ts","card/clearCard.ts","card/initCard.tsx","card/ReactCard.tsx","SelectedContext.tsx","Deck.tsx","Column.tsx","SuitSource.tsx","Solitaire.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Suit","renderHeart","ctx","topCurveHeight","cfg","beginPath","moveTo","bezierCurveTo","closePath","fillStyle","fill","renderHearts","topX","topY","translate","botX","botY","scale","renderClub","clubCenterX","clubCenterY","clubOffset","clubRadius","arc","Math","PI","lineTo","renderClubs","renderDiamond","renderDiamonds","renderSpade","topHeight","bottomHeight","bottomWidth","quadraticCurveTo","renderSpades","renderBack","lineWidth","offset","strokeStyle","i","stroke","renderSpace","fillRect","fillText","value","renderText","card","font","suit","S","C","D","H","textAlign","topCornerX","topCornerY","botCornerX","botCornerY","clearCard","isSelected","clearRect","initCard","id","className","isShown","ref","width","height","ReactCard","props","componentDidMount","renderCard","componentDidUpdate","render","onClick","refs","canvas","getContext","Component","SelectedContext","React","createContext","ReactDeck","deck","dealt","onDeal","onCardClick","dealer","length","type","topDealt","Consumer","selected","createHandler","cards","ind","findIndex","c","undefined","ReactColumn","column","handler","reactCards","map","key","checkSelection","ReactSuitSource","source","myCard","shuffle","curr","shuffled","floor","random","temp","history","Solitaire","draw","state","pop","push","setState","onDeckClick","onSuitClick","sources","canAppend","finalizeSelection","index","onColumnClick","cardIndex","cols","forEach","target","check","columns","srcs","s","Provider","Object","values","createCards","createColumns","keys","_","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69930618.chunk.js","sourcesContent":["enum Suit {\n    S = \"Spades\",\n    H = \"Hearts\",\n    C = \"Clubs\",\n    D = \"Diamonds\",\n};\n\nexport default Suit;","export default {\n    canvasWidth: 150,\n    canvasHeight: 200,\n    fontStyle: '40px Calibri',\n    cornerFontStyle: '20px Calibri',\n    offset: 10,\n    iconWidth: 15,\n    iconHeight: 20,\n    spadeColor: 'black',\n    clubColor: 'black',\n    heartColor: 'red',\n    diamondColor: 'red',\n    backColor: 'red',\n    backgroundColor: 'white',\n    selectedColor: 'skyblue',\n    numBackLines: 30,\n    spaceColor: 'darkgray',\n};","import cfg from './cardConfig';\n\nconst renderHeart = (ctx: CanvasRenderingContext2D): void => {\n    const topCurveHeight = cfg.iconHeight * 0.3;\n    ctx.beginPath();\n        ctx.moveTo(0, topCurveHeight);\n        ctx.bezierCurveTo(\n            0,\n            0,\n            -cfg.iconWidth / 2,\n            0,\n            -cfg.iconWidth / 2,\n            topCurveHeight,\n        );\n        ctx.bezierCurveTo(\n            -cfg.iconWidth / 2,\n            (cfg.iconHeight + topCurveHeight) / 2,\n            0,\n            (cfg.iconHeight + topCurveHeight) / 2,\n            0,\n            cfg.iconHeight,\n        );\n        ctx.bezierCurveTo(\n            0,\n            (cfg.iconHeight + topCurveHeight) / 2,\n            cfg.iconWidth / 2,\n            (cfg.iconHeight + topCurveHeight) / 2,\n            cfg.iconWidth / 2,\n            topCurveHeight,\n        );\n        ctx.bezierCurveTo(\n            cfg.iconWidth / 2,\n            0,\n            0,\n            0,\n            0,\n            topCurveHeight\n        );\n    ctx.closePath();\n    ctx.fillStyle = cfg.heartColor;\n    ctx.fill();\n};\n\nconst renderHearts = (ctx: CanvasRenderingContext2D): void => {\n\n    const topX = cfg.iconWidth / 2 + cfg.offset;\n    const topY = cfg.offset;\n    ctx.translate(topX, topY);\n    renderHeart(ctx);\n    ctx.translate(-topX, -topY);\n\n    const botX = cfg.canvasWidth - (cfg.iconWidth / 2 + cfg.offset);\n    const botY = cfg.canvasHeight - cfg.iconHeight / 2;\n    ctx.translate(botX, botY);\n    ctx.scale(1, -1);\n    renderHeart(ctx);\n    ctx.scale(1, -1);\n    ctx.translate(-botX, -botY);\n};\n\nexport default renderHearts;","import cfg from './cardConfig';\n\nconst renderClub = (ctx: CanvasRenderingContext2D): void => {\n    // Top left\n    const clubCenterX = cfg.iconWidth / 2;\n    const clubCenterY = cfg.iconHeight / 2;\n    const clubOffset = clubCenterX / 10;\n    const clubRadius = clubCenterX / 2;\n    // draw the club\n    ctx.beginPath();\n        ctx.fillStyle = cfg.clubColor;\n        ctx.moveTo(clubCenterX, clubCenterY);\n        ctx.arc(clubCenterX - clubRadius + clubOffset, clubCenterY, clubRadius, 0, 2 * Math.PI);\n        ctx.moveTo(clubCenterX, clubCenterY);\n        ctx.arc(clubCenterX + clubRadius - clubOffset, clubCenterY, clubRadius, 0, 2 * Math.PI);\n        ctx.moveTo(clubCenterX, clubCenterY);\n        ctx.arc(clubCenterX, clubCenterY - clubRadius + clubOffset, clubRadius, 0, 2 * Math.PI);\n        ctx.moveTo(clubCenterX, clubCenterY);\n        ctx.lineTo(clubCenterX - clubCenterX / 2, clubCenterY * 2);\n        ctx.lineTo(clubCenterX + clubCenterX / 2, clubCenterY * 2);\n        ctx.fill();\n    ctx.closePath();\n};\n\nconst renderClubs = (ctx: CanvasRenderingContext2D): void => {\n    ctx.translate(cfg.offset, cfg.offset);\n    renderClub(ctx);\n    ctx.translate(-cfg.offset, -cfg.offset);\n\n    const botX = cfg.canvasWidth - cfg.iconWidth - cfg.offset;\n    const botY = cfg.canvasHeight - cfg.iconHeight / 2;\n    ctx.translate(botX, botY);\n    ctx.scale(1, -1);\n    renderClub(ctx);\n    ctx.scale(1, -1);\n    ctx.translate(-botX, -botY);\n};\n\nexport default renderClubs;","import cfg from './cardConfig';\n\nconst renderDiamond = (ctx: CanvasRenderingContext2D): void => {\n    ctx.beginPath();\n        ctx.fillStyle = cfg.diamondColor;\n        ctx.moveTo(cfg.iconWidth / 2, 0);\n        ctx.lineTo(0, cfg.iconHeight / 2);\n        ctx.lineTo(cfg.iconWidth / 2, cfg.iconHeight);\n        ctx.lineTo(cfg.iconWidth, cfg.iconHeight / 2);\n        ctx.lineTo(cfg.iconWidth / 2, 0);\n        ctx.fill();\n    ctx.closePath();\n};\n\nconst renderDiamonds = (ctx: CanvasRenderingContext2D): void => {\n    ctx.translate(cfg.offset, cfg.offset);\n    renderDiamond(ctx);\n    ctx.translate(-cfg.offset, -cfg.offset);\n\n    const botX = cfg.canvasWidth - cfg.iconWidth - cfg.offset;\n    const botY = cfg.canvasHeight - cfg.iconHeight / 2;\n    ctx.translate(botX, botY);\n    ctx.scale(1, -1);\n    renderDiamond(ctx);\n    ctx.scale(1, -1);\n    ctx.translate(-botX, -botY);\n};\n\nexport default renderDiamonds;","import cfg from './cardConfig';\n\nconst renderSpade = (ctx: CanvasRenderingContext2D): void => {\n    const topHeight = cfg.iconHeight * 0.7;\n    const bottomHeight = cfg.iconWidth * 0.3;\n    const bottomWidth = cfg.iconWidth * 0.7;\n    const topHeightModifier = 1.3;\n    ctx.beginPath();\n        ctx.moveTo(0, 0);\n        // Top left of spade\n        ctx.bezierCurveTo(\n            0,\n            topHeight / 2,\n            -cfg.iconWidth / 2,\n            topHeight / 2,\n            -cfg.iconWidth / 2,\n            topHeight,\n        );\n        // bottom left of spade\n        ctx.bezierCurveTo(\n            -cfg.iconWidth / 2,\n            topHeight * topHeightModifier,\n            0,\n            topHeight * topHeightModifier,\n            0,\n            topHeight,\n        );\n        // bottom right of spade\n        ctx.bezierCurveTo(\n            0,\n            topHeight * topHeightModifier,\n            cfg.iconWidth / 2,\n            topHeight * topHeightModifier,\n            cfg.iconWidth / 2,\n            topHeight,\n        );\n        // top right of spade\n        ctx.bezierCurveTo(\n            cfg.iconWidth / 2,\n            topHeight / 2,\n            0,\n            topHeight / 2,\n            0,\n            0,\n        );\n    ctx.closePath();\n    ctx.fill();\n\n    // Bottom\n    ctx.beginPath();\n        ctx.moveTo(0, topHeight);\n        ctx.quadraticCurveTo(\n            0,\n            topHeight + bottomHeight,\n            -bottomWidth / 2,\n            topHeight + bottomHeight,\n        );\n        ctx.lineTo(bottomWidth / 2, topHeight + bottomHeight);\n        ctx.quadraticCurveTo(\n            0,\n            topHeight + bottomHeight,\n            0,\n            topHeight,\n        );\n    ctx.closePath();\n    ctx.fillStyle = cfg.spadeColor;\n    ctx.fill();\n};\n\nconst renderSpades = (ctx: CanvasRenderingContext2D): void => {\n    ctx.fillStyle = cfg.spadeColor;\n    const topX = cfg.iconWidth / 2 + cfg.offset;\n    const topY = cfg.offset;\n    ctx.translate(topX, topY);\n    renderSpade(ctx);\n    ctx.translate(-topX, -topY);\n\n    const botX = cfg.canvasWidth - (cfg.iconWidth / 2 + cfg.offset);\n    const botY = cfg.canvasHeight - cfg.iconHeight / 2;\n    // Bottom spade\n    ctx.translate(botX, botY);\n    ctx.scale(1, -1);\n    renderSpade(ctx);\n    ctx.scale(1, -1);\n    ctx.translate(-botX, -botY);\n};\n\nexport default renderSpades;","import cfg from './cardConfig';\n\nconst renderBack = (ctx: CanvasRenderingContext2D): void => {\n    ctx.lineWidth = 1.0;\n    const offset = 2 * (cfg.canvasHeight / cfg.numBackLines);\n    \n    ctx.beginPath();\n    ctx.strokeStyle = 'red';\n    for (let i = 0; i < cfg.numBackLines; ++i) {\n        ctx.moveTo(0, i * offset);\n        ctx.lineTo(i * offset, 0);\n    }\n    ctx.closePath();\n    ctx.stroke();\n    ctx.beginPath();\n    for (let i = 0; i < cfg.numBackLines; ++i) {\n        ctx.moveTo(cfg.canvasWidth - (i * offset), 0);\n        ctx.lineTo(cfg.canvasWidth, i * offset);\n    }\n    ctx.closePath();\n    ctx.stroke();\n};\n\nexport default renderBack;","import cfg from './cardConfig';\n\nconst renderSpace = (ctx: CanvasRenderingContext2D): void => {\n    ctx.fillStyle = cfg.spaceColor;\n    ctx.fillRect(0, 0, cfg.canvasWidth, cfg.canvasHeight);\n};\n\nexport default renderSpace;","import cfg from './cardConfig';\nimport { Card, Suit } from '../interfaces';\n\nconst fillText = (ctx: CanvasRenderingContext2D, value: number): void => {\n    if (value === 1) {\n        ctx.fillText('A', 0, 0);\n    } else if (value < 11) {\n        ctx.fillText(`${value}`, 0, 0);\n    } else if (value === 11) {\n        ctx.fillText('J', 0, 0);\n    } else if (value === 12) {\n        ctx.fillText('Q', 0, 0);\n    } else {\n        ctx.fillText('K', 0, 0);\n    }\n};\n\nconst renderText = (ctx: CanvasRenderingContext2D, card: Card): void => {\n    // Text in the middle\n    ctx.font = cfg.fontStyle;\n    switch (card.suit) {\n        case Suit.S:\n            ctx.fillStyle = cfg.spadeColor;\n            break;\n        case Suit.C:\n            ctx.fillStyle = cfg.clubColor;\n            break;\n        case Suit.D:\n            ctx.fillStyle = cfg.diamondColor;\n            break;\n        case Suit.H:\n            ctx.fillStyle = cfg.heartColor;\n            break;\n    }\n    ctx.textAlign = 'center';\n    ctx.translate(cfg.canvasWidth / 2, cfg.canvasHeight / 2);\n    fillText(ctx, card.value);\n    ctx.translate(-cfg.canvasWidth / 2, -cfg.canvasHeight / 2);\n\n    const topCornerX = cfg.canvasWidth - 2 * cfg.offset;\n    const topCornerY = 3 * cfg.offset;\n    ctx.translate(topCornerX, topCornerY);\n    ctx.font = cfg.cornerFontStyle;\n    fillText(ctx, card.value);\n    ctx.translate(-topCornerX, -topCornerY);\n\n    const botCornerX = 2 * cfg.offset;\n    const botCornerY = cfg.canvasHeight - 1.5 * cfg.offset;\n    ctx.translate(botCornerX, botCornerY);\n    ctx.font = cfg.cornerFontStyle;\n    fillText(ctx, card.value);\n    ctx.translate(-botCornerX, -botCornerY);\n};\n\nexport default renderText;","import cfg from './cardConfig';\n\nconst clearCard = (ctx: CanvasRenderingContext2D, isSelected?: boolean): void => {\n    ctx.clearRect(0, 0, cfg.canvasWidth, cfg.canvasHeight);\n    if (isSelected) {\n        ctx.fillStyle = cfg.selectedColor;\n    } else {\n        ctx.fillStyle = cfg.backgroundColor;\n    }\n    ctx.fillRect(0, 0, cfg.canvasWidth, cfg.canvasHeight);\n};\n\nexport default clearCard;","import React from 'react';\nimport cfg from './cardConfig';\nimport { Card } from '../interfaces';\n\nconst initCard = (card: Card): React.ReactComponentElement<\"canvas\"> => {\n    return <canvas id={`canvas${card.suit}-${card.value}`} className={`react-card ${card.isShown ? '' : 'no-click'}`} ref=\"canvas\" width={cfg.canvasWidth} height={cfg.canvasHeight} />\n};\n\nexport default initCard;","import React, { Component } from 'react';\nimport { Card, Suit } from '../interfaces';\nimport renderHearts from './renderHearts';\nimport renderClubs from './renderClubs';\nimport renderDiamonds from './renderDiamonds';\nimport renderSpades from './renderSpades';\nimport renderBack from './renderBack';\nimport renderSpace from './renderSpace';\nimport renderText from './renderText';\nimport clearCard from './clearCard';\nimport initCard from './initCard';\n\nimport './ReactCard.css';\ninterface CardProps {\n    card: Card;\n    onClick: (card: Card) => void;\n    isSelected?: boolean;\n};\n\nexport default class ReactCard extends Component<CardProps, {}, {}> {\n    public constructor(props: CardProps) {\n        super(props);\n    };\n\n    public componentDidMount: () => void = () => {\n        this.renderCard();\n    };\n\n    public componentDidUpdate: () => void = () => {\n        this.renderCard();\n    };\n\n    public render = (): React.ReactNode => {\n        const { card, onClick } = this.props;\n        return (\n            <div className=\"react-card-holder\" onClick={() => onClick(card)}>\n                {initCard(card)}\n            </div>\n        );\n    };\n\n    private renderCard = (): void => {\n        const { card, isSelected } = this.props;\n        const ctx = (this.refs.canvas as HTMLCanvasElement).getContext('2d');\n        if (ctx !== null) {\n            clearCard(ctx, isSelected);\n            if (!card.isShown) {\n                renderBack(ctx);\n                return;\n            } else if (card.value === -1) {\n                renderSpace(ctx);\n                return;\n            }\n            switch (card.suit) {\n                case Suit.C:\n                    renderClubs(ctx);\n                    break;\n                case Suit.D:\n                    renderDiamonds(ctx);\n                    break;\n                case Suit.H:\n                    renderHearts(ctx);\n                    break;\n                case Suit.S:\n                    renderSpades(ctx);\n                    break;\n            }\n            renderText(ctx, card);\n        }\n    }\n};","import React from 'react';\nimport { Card } from './interfaces';\n\nconst SelectedContext = React.createContext(([] as Card[]));\n\nexport default SelectedContext;","import React from 'react';\nimport { Deck, Suit } from './interfaces';\nimport ReactCard from './card/ReactCard';\nimport SelectedContext from './SelectedContext';\nimport './Deck.css';\n\ninterface DeckProps extends Deck {\n    onDeal: () => void;\n    onCardClick: () => void;\n};\n\nconst ReactDeck: React.FunctionComponent<DeckProps> = ({ deck, dealt, onDeal, onCardClick }) => {\n    let dealer: React.ReactNode = null;\n    if (deck.length > 0) {\n        dealer = <ReactCard card={{suit: Suit.S, type:'card', isShown: false, value: 0 }} onClick={onDeal} />\n    } else {\n        dealer = <ReactCard card={{suit: Suit.S, type:'card', isShown: true, value: -1 }} onClick={onDeal} />;\n    }\n    let topDealt: React.ReactNode = null;\n    if (dealt.length > 0) {\n        topDealt = <SelectedContext.Consumer>\n            { selected => {\n                const card = dealt[dealt.length - 1];\n                const isSelected = (\n                    selected.length === 1\n                    && card.suit === selected[0].suit\n                    && card.value === selected[0].value\n                );\n                return <ReactCard card={card} onClick={onCardClick} isSelected={isSelected} />;\n            }}\n        </SelectedContext.Consumer>\n        \n    } else {\n        topDealt = <ReactCard card={{suit: Suit.S, type:'card', isShown: true, value: -1 }} onClick={() => {}} />;\n    }\n    return (\n        <div className=\"react-deck\">\n            <div className=\"deck-dealer\">\n                {dealer}\n            </div>\n            <div className=\"deck-dealt\">\n                {topDealt}\n            </div>\n        </div>\n    );\n};\n\nexport default ReactDeck;","import React from 'react';\nimport { Column, Card, Suit } from './interfaces';\nimport ReactCard from './card/ReactCard';\nimport SelectedContext from './SelectedContext';\n\nimport './Column.css';\n\ninterface ColProps {\n    column: Column;\n    onClick: (index?: number) => void;\n\n};\n\n\n\nconst ReactColumn: React.FunctionComponent<ColProps> = ({ column, onClick }) => {\n    const { cards } = column;\n    const handler = createHandler(cards, onClick);\n    const checkSelection = (selected: Card[], card: Card): React.ReactNode => {\n        const isSelected = selected.findIndex(c => c.suit === card.suit && c.value === card.value) !== -1;\n        return <ReactCard key={`${card.suit} ${card.value}`} card={card} onClick={handler} isSelected={isSelected} />;\n    }\n    const reactCards = cards.length === 0\n        ? [ <ReactCard card={{type: 'card', value: -1, suit: Suit.S, isShown: true}} onClick={handler} /> ]\n        : cards.map(c => <SelectedContext.Consumer>\n            {selected => checkSelection(selected, c)}\n        </SelectedContext.Consumer>);\n    return <div className=\"react-column\">\n        {reactCards}\n    </div>;\n};\n\nconst createHandler = (cards: Card[], onClick: (index?: number) => void): (card: Card) => void => {\n    return (card: Card): void => {\n        const ind = cards.findIndex(c => c.value === card.value && c.suit === card.suit);\n        if (ind === -1) {\n            onClick(undefined);\n        } else {\n            onClick(ind);\n        }\n    };\n}\n\nexport default ReactColumn;","import React from 'react';\nimport { SuitSource, Suit } from './interfaces';\nimport ReactCard from './card/ReactCard';\nimport SelectedContext from './SelectedContext';\n\ninterface SuitSourceParams {\n    source: SuitSource;\n    onClick: (source: SuitSource) => void;\n};\n\nconst ReactSuitSource: React.FunctionComponent<SuitSourceParams> = ({ source, onClick }) => {\n\n    const card = source.cards.length === 0\n    ? <ReactCard card={{type: 'card', value: -1, suit: Suit.S, isShown: true}} onClick={() => onClick(source)} />\n    : (\n        <SelectedContext.Consumer>\n            {selected => {\n                const myCard = source.cards[source.cards.length - 1];\n                const isSelected = selected.findIndex(c => c.value === myCard.value && c.suit === myCard.suit) !== -1;\n                return <ReactCard card={source.cards[source.cards.length - 1]} onClick={() => onClick(source)} isSelected={isSelected} />\n            }}\n        </SelectedContext.Consumer>\n    );\n    return <div>\n        {card}\n    </div>;\n};\n\nexport default ReactSuitSource;","import React, { Component } from 'react';\nimport { Card, SelectedCard, Column, Deck, SuitSource, Suit } from './interfaces';\nimport ReactDeck from './Deck';\nimport ReactColumn from './Column';\nimport ReactSuitSource from './SuitSource';\nimport SelectedContext from './SelectedContext';\nimport './Solitaire.css';\n\nfunction shuffle(cards: Card[]): Card[] {\n    let curr = cards.length;\n    const shuffled: Card[] = [...cards];\n\n    while (curr) {\n        const ind = Math.floor(Math.random() * curr--);\n        const temp = shuffled[curr];\n        shuffled[curr] = shuffled[ind];\n        shuffled[ind] = temp;\n    }\n    return shuffled;\n};\n\nfunction createCards(): Card[] {\n    const cards: Card[] = [];\n    Object.values(Suit).forEach(s => {\n        for (let i = 1; i <= 13; ++i) {\n            const card: Card = {\n                type: 'card',\n                value: i,\n                suit: s,\n                isShown: false,\n            };\n            cards.push(card);\n        }\n    });\n    return cards;\n};\n\nfunction createColumns(cards: Card[]): Column[] {\n    const cols: Column[] = [];\n    for (let i = 0; i < 7; ++i) {\n        cols.push({\n            type: 'column',\n            cards: [],\n            index: i,\n        });\n    }\n    let ind = 0;\n    while (ind++ < 7) {\n        for (let i = ind - 1; i < 7; ++i) {\n            cols[i].cards.push(cards.pop()!);\n        }\n    }\n    for (let i = 0; i < 7; ++i) {\n        cols[i].cards[i].isShown = true;\n    }\n    return cols;\n};\n\ninterface GameState {\n    deck: Deck;\n    cols: Column[];\n    sources: SuitSource[];\n};\n\ninterface SolitaireState extends GameState {\n    selected: SelectedCard;\n};\n\nconst history: GameState[] = [];\n\nexport default class Solitaire extends Component<{}, SolitaireState> {\n    public constructor(props: {}) {\n        super(props);\n\n        // Create cards, deal, set up deck, etc.\n        const cards = shuffle(shuffle(createCards()));\n        // Create columns. This should edit our cards array accordingly\n        const cols = createColumns(cards);\n        // Create deck\n        const deck: Deck = {\n            type: 'deck',\n            deck: cards,\n            dealt: [],\n        };\n        const sources: SuitSource[] = Object.keys(Suit).map((_, i) => {\n            return {\n                type: 'suitSource',\n                index: i,\n                cards: [],\n            };\n        });\n\n        this.state = {\n            deck,\n            cols,\n            sources,\n            selected: {\n                type: 'selected',\n                cards: [],\n                source: undefined,\n            },\n        };\n    };\n\n    private draw = (): void => {\n        const { selected, deck } = this.state;\n        if (deck.deck.length === 0) {\n            // reset\n            let card: Card|undefined = deck.dealt.pop();\n            while (card !== undefined) {\n                card.isShown = false;\n                deck.deck.push(card);\n                card = deck.dealt.pop();\n            }\n        } else {\n            // move\n            const card: Card = deck.deck.pop()!;\n            card.isShown = true;\n            deck.dealt.push(card);\n        }\n        selected.cards = [];\n        selected.source = undefined;\n        this.setState({ selected, deck });\n    };\n\n    private onDeckClick = (): void => {\n        const { selected, deck } = this.state;\n        if (deck.dealt.length > 0) {\n            selected.cards = [ deck.dealt[deck.dealt.length - 1] ];\n            selected.source = deck;\n        } else {\n            selected.cards = [];\n            selected.source = undefined;\n        }\n        this.setState({ selected });\n    };\n\n    private onSuitClick = (source: SuitSource): void => {\n        let { selected, sources } = this.state;\n        // if we have selected something, see if we can place into. If we can, then engage?\n        if (selected.source !== undefined) {\n            // first see if we're only holding one\n            if (selected.cards.length === 1) {\n                const card = selected.cards[0];\n                if (this.canAppend(source, card)) {\n                    // finalize, then move\n                    this.finalizeSelection();\n                    // refresh our view of who is selected and who the sources are!\n                    selected = this.state.selected;\n                    sources = this.state.sources;\n                    source.cards.push(card);\n                } else {\n                    selected.source = undefined;\n                    selected.cards = [];\n                }\n            }\n        } else {\n            // we are selecting FROM this suitSource\n            if (source.cards.length > 0) {\n                selected.source = source;\n                selected.cards = [ source.cards[source.cards.length - 1] ];\n            }\n        }\n        sources[source.index] = source;\n        this.setState({ selected, sources });\n    };\n\n    private onColumnClick = (source: Column, cardIndex?: number): void => {\n        let { selected, cols } = this.state;\n        if (selected.source !== undefined) {\n            // We are trying to append onto our column. Do the checks!\n            if (selected.source.type === 'column') {\n                // check that suit is compatible and number is correct, then engage\n                if (this.canAppend(source, selected.cards[0])) {\n                    // We can append! add to our column, then finalize\n                    selected.cards.forEach(c => {\n                        source.cards.push(c);\n                    });\n                    this.finalizeSelection();\n                    // refresh our view of who is selected and who the sources are!\n                    selected = this.state.selected;\n                    cols = this.state.cols;\n                } else {\n                    selected.cards = [];\n                    selected.source = undefined;\n                }\n            } else if (selected.source.type === 'deck') {\n                if (this.canAppend(source, selected.cards[0])) {\n                    source.cards.push(selected.cards[0]);\n                    this.finalizeSelection();\n                    selected = this.state.selected;\n                    cols = this.state.cols;\n                }\n            } else if (selected.source.type === 'suitSource') {\n                if (this.canAppend(source, selected.cards[0])) {\n                    source.cards.push(selected.cards[0]);\n                    this.finalizeSelection();\n                    selected = this.state.selected;\n                    cols = this.state.cols;\n                }\n            }\n        } else if (cardIndex !== undefined) {\n            // Set the flag!\n            selected.cards = [];\n            for (let i = cardIndex; i < source.cards.length; ++i) {\n                selected.cards.push(source.cards[i]);\n            }\n            selected.source = source;\n        }\n        this.setState({ selected, cols });\n    };\n\n    private canAppend = (target: Column|Deck|SuitSource, check: Card): boolean => {\n        if (target.type === 'deck') {\n            // can never append to deck\n            return false;\n        } else if (target.type === 'column') {\n            // compatible suit, decrement number\n            if (target.cards.length === 0) {\n                // has to be king!\n                return check.value === 13;\n            }\n            const card = target.cards[target.cards.length - 1];\n            if (\n                ((card.suit === Suit.C || card.suit === Suit.S) && (check.suit === Suit.H || check.suit === Suit.D))\n                ||\n                ((card.suit === Suit.H || card.suit === Suit.D) && (check.suit === Suit.C || check.suit === Suit.S))\n            ) {\n                // suits are compatible - check the number\n                return check.value === card.value - 1;\n            }\n        } else if (target.type === 'suitSource') {\n            // same suit, increment number\n            if (target.cards.length === 0) {\n                return check.value === 1;\n            }\n            const card = target.cards[target.cards.length - 1];\n            return check.suit === card.suit && check.value === card.value + 1;\n        }\n        return false;\n    };\n\n    private finalizeSelection = (): void => {\n        const { selected, sources, deck, cols } = this.state;\n        if (selected.source === undefined) {\n            return;\n        }\n        history.push({\n            deck: {...deck},\n            sources: [...sources],\n            cols: [...cols],\n        });\n        if (selected.source.type === 'deck') {\n            deck.dealt.pop();\n        } else if (selected.source.type === 'column') {\n            // pop for the number of cards we have selected\n            selected.cards.forEach(() => {\n                cols[(selected.source as Column).index].cards.pop();\n            });\n            // if there are any cards left, flip the last one\n            if (cols[(selected.source as Column).index].cards.length > 0) {\n                cols[(selected.source as Column).index].cards[\n                    cols[(selected.source as Column).index].cards.length - 1\n                ].isShown = true;\n            }\n        } else if (selected.source.type === 'suitSource') {\n            sources[selected.source.index].cards.pop();\n        }\n        selected.cards = [];\n        selected.source = undefined;\n        this.setState({ selected, deck, sources, cols });\n    };\n\n    public render = () => {\n        const { deck, cols, sources, selected } = this.state;\n        const columns = cols.map(c => {\n            return <ReactColumn key={c.index} column={c} onClick={(index?: number) => this.onColumnClick(c, index)} />\n        });\n        const srcs = sources.map(s => {\n            return <ReactSuitSource source={s} onClick={this.onSuitClick} />;\n        });\n        return (\n            <SelectedContext.Provider value={selected.cards}>\n                <div>\n                    <div className=\"solitaire-header\">\n                        <div className=\"solitaire-deck\">\n                            <ReactDeck\n                                type=\"deck\"\n                                deck={deck.deck}\n                                dealt={deck.dealt}\n                                onDeal={this.draw}\n                                onCardClick={this.onDeckClick}\n                            />\n                        </div>\n                        <div className=\"solitaire-sources\">\n                            {srcs}\n                        </div>\n                    </div>\n                    <div className=\"solitaire-cols\">\n                        {columns}\n                    </div>\n                </div>\n            </SelectedContext.Provider>\n        );\n    };\n};","import React from 'react';\nimport './App.css';\nimport Solitaire from './Solitaire';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Solitaire />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}